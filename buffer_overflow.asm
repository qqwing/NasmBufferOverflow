; buffer_overflow.asm

section .data
    input_msg db 'Enter your name: ', 0                ; Сообщение, запрашивающее ввод пользователя
    buffer db 10                                       ; Буфер для хранения имени длиной 10 байт
    error_msg db 'Error: Buffer overflow detected!', 0 ; Сообщение об ошибке переполнения буфера
    success_msg db 'Input is safe.', 0                 ; Сообщение об успешном вводе

section .bss
    user_input resb 32                                 ; Буфер для хранения пользовательского ввода длиной 32 байта

section .text
    global _start                                      ; Объявление точки входа в программу

_start:
    ; Сначала системный вызов write для вывода текста в консоль.
    
    mov eax, 4                                         ; В регистр EAX помещаем 4 - код системного вызова sys_write
    mov ebx, 1                                         ; В регистр EBX помещаем 1 - файловый дескриптор (stdout)
    mov ecx, input_msg                                 ; В регистр ECX помещаем адрес строки input_msg для вывода
    mov edx, 17                                        ; В регистр EDX помещаем длину строки (17 символов включая нулевой символ)
    int 0x80                                           ; Вызываем системное прерывание для выполнения системного вызова

    ; Теперь прочитаем ввод пользователя с помощью системного вызова read.
    ; Введённые данные будут помещены в буфер user_input.

    mov eax, 3                                         ; В регистр EAX помещаем 3 - код системного вызова sys_read
    mov ebx, 0                                         ; В регистр EBX помещаем 0 - файловый дескриптор (stdin)
    mov ecx, user_input                                ; В регистр ECX помещаем адрес буфера user_input
    mov edx, 32                                        ; В регистр EDX помещаем максимальное количество байт для чтения (32)
    int 0x80                                           ; Вызываем системное прерывание для выполнения системного вызова

    ; EAX содержит количество прочитанных байт.
    ; Если количество байт больше 10, значит есть риск переполнения буфера.

    cmp eax, 10                                        ; Сравниваем количество введённых байт (EAX) с размером буфера (10 байт)
    jg overflow                                        ; Если количество байт больше 10, переходим к метке overflow

    ; Если переполнения нет, выводим сообщение об успешном вводе
    mov eax, 4                                         ; Системный вызов write для вывода сообщения об успешном вводе
    mov ebx, 1                                         ; Файловый дескриптор (stdout)
    mov ecx, success_msg                               ; В регистр ECX помещаем адрес строки success_msg
    mov edx, 15                                        ; Длина строки success_msg
    int 0x80                                           ; Вызываем системное прерывание для выполнения системного вызова

    ; Завершаем программу без ошибок
    mov eax, 1                                         ; В регистр EAX помещаем 1 - код системного вызова sys_exit
    xor ebx, ebx                                      ; В регистр EBX помещаем 0 - код успешного завершения
    int 0x80                                           ; Вызываем системное прерывание для завершения программы

overflow:
    ; Если произошло переполнение, выводим сообщение об ошибке
    mov eax, 4                                         ; Системный вызов write для вывода сообщения об ошибке
    mov ebx, 1                                         ; Файловый дескриптор (stdout)
    mov ecx, error_msg                                 ; В регистр ECX помещаем адрес строки error_msg
    mov edx, 25                                        ; Длина строки error_msg
    int 0x80                                           ; Вызываем системное прерывание для выполнения системного вызова

    ; Завершаем программу с кодом ошибки
    mov eax, 1                                         ; В регистр EAX помещаем 1 - код системного вызова sys_exit
    mov ebx, 1                                         ; В регистр EBX помещаем 1 - код ошибки
    int 0x80                                           ; Вызываем системное прерывание для завершения программы
